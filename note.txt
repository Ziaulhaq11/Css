rem or em is based on font 

label element in html

We can define two classes and order doesnt matter which one is first or not
But in styles which ever class is last that will apply.

Similarly id override class

And inline styles overrides outline style
!important will override everyother style

Absolute length -px
Relative length -em,rem
min-height : 200px i think this will not change and if we dont apply min height then it will take space of what it required

Variables :
--var_name : ;
var(--var_name)
previously we defined variable in parent class then it applies to all
child classes
If we want to define global variable inside root element
:root {
    var
}
if we define variable in root and in other element then root variable overrides other

Media queries can change variables depends on the size of screen

Align items : we write in container

Align self : in individual item and it will overwrite align-items

body{styles}


color: blue;
            border-radius: 5px;
            border-color:red;
            border-style: double;
            border-width: 5px;
            border-radius: 30px;
	    border: none;
            font-size: 1em;
            font-family: monospace;
            background-color:slategray;
            margin: 50px 50px 40px 40px;  /*top right bottom left*/
            padding: 20px 20px 20px 20px;
            margin:20px
            padding : 5px
	   text-align : center	
	    text-decoration : none; this will used to in 'a' tag elements where some decoration is already applied. 
		and if we want to change the color of anchor elements we have to specifically mention in css. if we do to parent it doesnt apply.
	    list-style : none
	    background-image : url();
	    background position : center
		background size  : cover this will adjust the background image size based on webpage.
	    text-shadow: 3px 3px 3px black; /*right or leftshadow  top or bottom shadow  sizeof the  shadow*/
    
    input[type:checkbox]{}

--var-name : value
:root{} For globalvariables
@media(max-width :300px) {
    :root {
        --var_name
    }
}

Grid : 
When i insert display set to grid it fill up entire space
In Grid1 we set styles to the container not to individual element.
display: Grid
grid-template-columns : 100px 100px 100px
grid-template-rows : 100px 100px
grid-template-columns : auto 1fr 10% 50px
grid-template-rows : same as above
grid-column-gap : 20px
grid-row-gap : 20px
grid-gap :20px 30px
grid-column : 2/4  (from 2 to 4)
grid-row : 2/4  (from 2 to 4)
justify-self:center (to align horizontally)
align-self : center (to align vertically)
align-items :
justify-items :
grid-template-area : header,footer,advert,.
grid-area : 2/1/3/4  (srow,scol,erow,ecol)
grid-template-columns/rows : repeat(2, 1fr 50px) 20px  
grid-template-columns: repeat(3, minmax(90px, 1fr));
grid-template-columns : repeat(autofill,minmax(60px, 1fr)) (fills only the space of content is required)
grid-template-columns : repeat(autofit,minmax(60px, 1fr))  (fills the entire space)

Grid area template
container class should have a grid-template-areas property similar to the preview but has . instead of the advert area.
grid-template-area : header,footer,advert,. .is used to define an empty cell

https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas


auto in grid stretches teh screen fully if available if others are auto otherwise it will take only the screen which they required

Grid in grid
.item3 {
        background: PaleTurquoise;
        grid-area: content;
        /* Only change code below this line */
        display:grid;
        grid-template-columns: auto  1fr;

Flex:
display: flex; /*row is default direction of flex*/
        flex-direction: column;
        flex-direction: row-reverse;

justify-content : center  if we put then in container the content will be in the center of container, if start then at the start of teh container
justify-content : flex start  for row it pushes to start of container and for column it pushes upwards
 justify-content : flex end  (usually it goes to right end but if flex is set to column then it will go down and up for flex start)
 align-items : it moves vertically
 center etc
 stretch it stretches the content
 baseline
 flex-wrap : wrap and moves item to next row
 I think width is very important if its not there nothing display
 flex-shrink : 1(2other) now this item will be 2 times bigger than other
 flex-grow : 1(2other) now this item will be 2 times smaller than other
flex-basis : 10em (20em) now this will be smaller than second
flex 0 1 auto default : grow shrink basis  /*important*/
order : 2(1)
align-self

Selectors : 
descendant selector (space)
child selector (>)
adjacent sibling selector (+)
general sibling selector (~)

* {}
.links:first-child()/last-child()
.links li:nth-child(1)
Specificity : element selecor are lower than classes.classes are lower than id and id is lower than inline style and most importantly 'important'
margin  : 0px auto (auto sets in centre if your width is 100% or less than)


BOx model : By default the box-sizing set to content model
 By default the margins were set to the elements we can remove them by setting margin and padding to 0.And box sizing is border-box.
Box sizing helps that we dont need to scroll through left and right
when we put width 100% and padding to 20px then the screen fill up and we need to scroll right 
    width: 300px;
    padding: 20px 20px; 

Rem to pixels
16 pixels - 1rem
But we can set it 62.5% and then 1rem = 10pixels

Button : 
background: none; /*background color not works here*/

Blocks : 
block      -- we can give height and width apply
inline     -- we can give height  and width doesnt apply margin applies to the left and right only not up and down.
inlineblock  -- we can give all properties as block.

Positioning : 
I think we need to set the  height to html and body to 100% or some. then it works
/*by default it was set to static after setting to absolute it doesnt care about container it sets where we set*/
Css look for position of the parent first if parent was set to relative and child was set to absolute then it takes relative*/

Positions :
Static  -- default position and it doesnt apply positioning like top,bottom etc. these doesnt work.
Absolute   -- it doesnt care about the container so if you set top to 0rem then it will go top on webpage not on container 
Relative   -- it care about container so if you set to 0rem it will set in the container
Fixed    -- it will stick in one place
Sticky   -- it will stick once it reaches some condition like (top:0) when it reaches.
Initial --
Inherit -- it inherits

transform: translate(-50%, -50%);  /*x and y*/


Pseudo elements : 

h1::after {
    content: 'me';
}

h1::before {
    content: 'me';

button:hover {
background-color:
cursor : pointer;

a:active {
a:visited {  -- if background is set to yellow then when we visit that links it turn yellow and it based on link.

input:focus{
background-color:

Float : 
 
used to position the elements but problem is it breaks other content to fix this we need to create a class called clear after the elements and :
.box1 {
    float: left;  
}

.clear {
    clear: both;
}

line-height : to set the height between elementss

a {background-color : yellow;}
selector ;declaration start; property; property/value separator; value;declaration separator;declaration end;

text-decoration : none,underline
text-transform : uppercase
word-spacing,letter-spacing

instead of marks in lists we can put image
list-style-image : url()




















